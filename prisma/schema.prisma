datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  password String // Store a hashed password
  isHost  Boolean @default(false)
  firstName String
  lastName String
  
  hostProfile HostProfile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HostProfile {
  id      Int    @id @default(autoincrement())
  details String // host-specific details

  userEmail      String       @unique
  user        User         @relation(fields: [userEmail], references: [email])
  spacecrafts Spacecraft[] // Relation to Spacecrafts hosted by this profile

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Spacecraft {
  id    Int    @id @default(autoincrement())
  name  String
  speed Float

  typeName String
  type   SpaceCraftType @relation(fields: [typeName], references: [name])
  statusName String
  status   BookingStatus @relation(fields: [statusName], references: [name])
  hostEmail String
  hostProfile   HostProfile @relation(fields: [hostEmail], references: [userEmail])
  tags  Tag[]  
  images SpacecraftImage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SpacecraftImage {
  imageID      Int        @id @default(autoincrement())
  spacecraftID Int
  cloudinaryPublicId    String // Cloudinary public ID used to generate URL, e.g. `spacecrafts/123456789`
  isHero      Boolean @default(false)
  description  String?
  spacecraft   Spacecraft @relation(fields: [spacecraftID], references: [id])

  @@map("spacecraft_images")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SpaceCraftType {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  spaceCrafts Spacecraft[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model BookingStatus {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  
  spaceCrafts Spacecraft[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Destination {
  id          Int    @id @default(autoincrement())
  name        String @unique
  description String
  distance    String
  travelTime  String

  tags  Tag[]  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TagCategory {
  id    Int    @id @default(autoincrement())
  name  String @unique
  
  tags  Tag[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Tag {
  id          Int            @id @default(autoincrement())
  name        String         @unique
  categoryName  String
  
  category    TagCategory    @relation(fields: [categoryName], references: [name])
  destinations Destination[] 
  spacecrafts Spacecraft[]  

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}
