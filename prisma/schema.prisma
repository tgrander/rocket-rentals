datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id   Int    @id @default(autoincrement())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
  role    Role[]
  host Host?
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int @unique
}

model Role {
  id   Int    @id @default(autoincrement())
  name String @unique

  users User[]
}

model Note {
  id   Int    @id @default(autoincrement())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
}

model Spacecraft {
  id   Int    @id @default(autoincrement())
  name  String
  images   SpacecraftImages[]
  speed Int
  type SpaceCraftType @relation(fields: [typeId], references: [id])
  typeId Int
  status SpaceCraftStatus @relation(fields: [statusId], references: [id])
  statusId Int

  // Host
  host Host @relation(fields: [hostId], references: [id])
  hostId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SpacecraftImages {
  imageID     Int      @id @default(autoincrement())
  spacecraftID Int
  imagePath   String
  description String?
  spacecraft  Spacecraft @relation(fields: [spacecraftID], references: [id])

  @@map("spacecraft_images")
}

model SpaceCraftType {
  id   Int    @id @default(autoincrement())
  name String @unique
  spaceCrafts Spacecraft[]
}

model SpaceCraftStatus {
  id   Int    @id @default(autoincrement())
  name String @unique
  spaceCrafts Spacecraft[]
}

model Host {
  id   Int    @id @default(autoincrement())
  name String @unique
  spaceCrafts Spacecraft[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int @unique
}

model Destination {
  id   Int    @id @default(autoincrement())
  name String @unique
  description String @unique
  Distance Int
  TravelTime Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}